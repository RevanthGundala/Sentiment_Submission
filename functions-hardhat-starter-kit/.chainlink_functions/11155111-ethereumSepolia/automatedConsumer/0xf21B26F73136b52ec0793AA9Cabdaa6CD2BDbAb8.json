{
  "createdAt": 1685657271926,
  "lastUpdatedAt": 1685657271927,
  "artifactVersion": "0",
  "status": "pending",
  "result": null,
  "error": null,
  "type": "automatedConsumer",
  "automatedConsumerContractAddress": "0xf21B26F73136b52ec0793AA9Cabdaa6CD2BDbAb8",
  "transactionReceipt": {
    "hash": "0x66ee9e864e1b6daf73adbddc334c5abf814d558701bd566dc74ee701bb0bd941",
    "type": 2,
    "accessList": [],
    "blockHash": null,
    "blockNumber": null,
    "transactionIndex": null,
    "confirmations": 0,
    "from": "0x2437935f644C9820EF5d226CC12034f0d552cDa9",
    "gasPrice": {
      "type": "BigNumber",
      "hex": "0x47868c08"
    },
    "maxPriorityFeePerGas": {
      "type": "BigNumber",
      "hex": "0x47868bfe"
    },
    "maxFeePerGas": {
      "type": "BigNumber",
      "hex": "0x47868c08"
    },
    "gasLimit": {
      "type": "BigNumber",
      "hex": "0x184edf"
    },
    "to": "0xf21B26F73136b52ec0793AA9Cabdaa6CD2BDbAb8",
    "value": {
      "type": "BigNumber",
      "hex": "0x00"
    },
    "nonce": 254,
    "data": "0xeb197c77000000000000000000000000000000000000000000000000000000000000017d000000000000000000000000000000000000000000000000000000000003d09000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000086a6c636f64654c6f636174696f6ec258200000000000000000000000000000000000000000000000000000000000000000686c616e6775616765c25820000000000000000000000000000000000000000000000000000000000000000066736f757263657908042f2f206d616b65204854545020726571756573740a636f6e73742075726c203d202768747470733a2f2f6861636b6174686f6e2e7370616365616e6474696d652e6465762f76312f73716c2f64716c270a6c65742073716c54657874203d206053454c4543540a20202020202046524f4d5f414444524553532041532057414c4c45545f414444524553532c0a202020202020434f554e54282a29204153205452414e53414354494f4e5f434f554e540a2020202046524f4d0a202020202020455448455245554d2e5452414e53414354494f4e530a2020202047524f55502042590a20202020202046524f4d5f414444524553530a202020204f524445522042590a20202020202043415354285452414e53414354494f4e5f434f554e5420415320444543494d414c283338292920444553430a202020204c494d49540a20202020202031303b603b0a2020202020200a6c6574207265736f757263654964203d2027455448455245554d2e5452414e53414354494f4e53270a636f6e7374206163636573735f746f6b656e203d202265794a306558426c496a6f6959574e6a5a584e7a4969776961326c6b496a6f694e4745324e5455774e6a59745a544d794d5330304e57466a4c5468695a574d745a445669597a67345a57557a5954497a496977695957786e496a6f6952564d794e54596966512e65794a70595851694f6a45324f4455324e5455304f544973496d35695a6949364d5459344e5459314e5451354d6977695a586877496a6f784e6a67314e6a55324f546b794c434a306558426c496a6f6959574e6a5a584e7a4969776964584e6c63694936496c4a48496977696333566963324e796158423061573975496a6f69595449794f544e6c4f474d744d44637a4d6930304d544d344c57466d4d4441744d4459344d474d345957566b5a6a5533496977696332567a63326c7662694936496a59774d4751314e5756695a474a694e5455324e446b31596d4d795a4759324e694973496e4e7a626c396c654841694f6a45324f4455334e4445344f5449324d546b73496d6c305a584a6864476c7662694936496a6b30596a49345a574a684e5449774d3249355a6d4977593249334e6a46695a694a392e5052435073422d35397548774f646f33743737313761304d796b487955634a3368364a59486f7357766c5570375367624f6665553270576d35714559635257724a59577362494a6b4854493772647872663864795367223b0a2f2f206c6574206f7074696f6e73203d207b0a2f2f2020206d6574686f643a2027504f5354272c0a2f2f202020686561646572733a207b0a2f2f20202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c0a2f2f202020202027636f6e74656e742d74797065273a20276170706c69636174696f6e2f6a736f6e272c0a2f2f2020202020617574686f72697a6174696f6e3a206042656172657220247b6163636573735f746f6b656e7d600a2f2f2020207d2c0a2f2f202020626f64793a204a534f4e2e737472696e67696679287b0a2f2f202020202073716c546578743a2073716c546578742c0a2f2f20202020207265736f7572636549643a207265736f7572636549640a2f2f2020207d290a2f2f207d3b0a0a2f2f20636f6e7374727563742074686520485454502052657175657374206f626a6563742e205365653a2068747470733a2f2f6769746875622e636f6d2f736d617274636f6e74726163746b69742f66756e6374696f6e732d686172646861742d737461727465722d6b6974236a6176617363726970742d636f64650a2f2f20706172616d73207573656420666f722055524c20717565727920706172616d65746572730a636f6e737420756e697377617052657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b0a202075726c3a2075726c2c0a20206d6574686f643a2022504f5354222c0a2020686561646572733a207b0a202020206163636570743a20276170706c69636174696f6e2f6a736f6e272c0a2020202027636f6e74656e742d74797065273a20276170706c69636174696f6e2f6a736f6e272c0a20202020617574686f72697a6174696f6e3a206042656172657220247b6163636573735f746f6b656e7d600a20207d2c0a2020646174613a207b0a2020202073716c546578743a2073716c546578742c0a202020207265736f7572636549643a207265736f7572636549640a20207d0a0a7d290a0a2f2f204578656375746520746865204150492072657175657374202850726f6d697365290a636f6e737420756e6973776170526573706f6e7365203d20617761697420756e6973776170526571756573742e646174613b0a0a69662028756e6973776170526573706f6e73652e6572726f7229207b0a2020636f6e736f6c652e6572726f7228756e6973776170526573706f6e73652e6572726f72290a20207468726f77204572726f7228225265717565737420746f20556e6973776170206661696c656422290a7d0a0a636f6e73742073656c6563746564416464726573736573203d20756e6973776170526573706f6e73652e6d617028286164647265737329203d3e207b0a20202020616464726573732e57414c4c45545f414444524553530a7d293b0a0a636f6e736f6c652e6c6f6728756e6973776170526573706f6e7365293b0a2f2f636f6e736f6c652e6c6f672873656c6563746564416464726573736573293b0a0a0a72657475726e2046756e6374696f6e732e656e636f646542797465732873656c6563746564416464726573736573293b0a00000000000000000000000000000000000000000000",
    "r": "0x60ffb8110088ab3346ae8c0a8df223ea5c9f746ea82162a10a05cf3e9cb58b14",
    "s": "0x43533731b87e4086b864dc9dddbaf2b9354726f46cc318178f2678579ac9acb2",
    "v": 0,
    "creates": null,
    "chainId": 11155111
  },
  "taskArgs": {
    "subid": "381",
    "interval": 100000000000000,
    "verify": true,
    "gaslimit": 250000,
    "simulate": true,
    "configpath": "/Users/revanthgundala/SnapshotV2/functions-hardhat-starter-kit/tasks/Functions-client/../../Functions-request-config.js",
    "contract": "0xf21B26F73136b52ec0793AA9Cabdaa6CD2BDbAb8"
  },
  "codeLocation": 0,
  "codeLanguage": 0,
  "source": "// make HTTP request\nconst url = 'https://hackathon.spaceandtime.dev/v1/sql/dql'\nlet sqlText = `SELECT\n      FROM_ADDRESS AS WALLET_ADDRESS,\n      COUNT(*) AS TRANSACTION_COUNT\n    FROM\n      ETHEREUM.TRANSACTIONS\n    GROUP BY\n      FROM_ADDRESS\n    ORDER BY\n      CAST(TRANSACTION_COUNT AS DECIMAL(38)) DESC\n    LIMIT\n      10;`;\n      \nlet resourceId = 'ETHEREUM.TRANSACTIONS'\nconst access_token = \"eyJ0eXBlIjoiYWNjZXNzIiwia2lkIjoiNGE2NTUwNjYtZTMyMS00NWFjLThiZWMtZDViYzg4ZWUzYTIzIiwiYWxnIjoiRVMyNTYifQ.eyJpYXQiOjE2ODU2NTU0OTIsIm5iZiI6MTY4NTY1NTQ5MiwiZXhwIjoxNjg1NjU2OTkyLCJ0eXBlIjoiYWNjZXNzIiwidXNlciI6IlJHIiwic3Vic2NyaXB0aW9uIjoiYTIyOTNlOGMtMDczMi00MTM4LWFmMDAtMDY4MGM4YWVkZjU3Iiwic2Vzc2lvbiI6IjYwMGQ1NWViZGJiNTU2NDk1YmMyZGY2NiIsInNzbl9leHAiOjE2ODU3NDE4OTI2MTksIml0ZXJhdGlvbiI6Ijk0YjI4ZWJhNTIwM2I5ZmIwY2I3NjFiZiJ9.PRCPsB-59uHwOdo3t7717a0MykHyUcJ3h6JYHosWvlUp7SgbOfeU2pWm5qEYcRWrJYWsbIJkHTI7rdxrf8dySg\";\n// let options = {\n//   method: 'POST',\n//   headers: {\n//     accept: 'application/json',\n//     'content-type': 'application/json',\n//     authorization: `Bearer ${access_token}`\n//   },\n//   body: JSON.stringify({\n//     sqlText: sqlText,\n//     resourceId: resourceId\n//   })\n// };\n\n// construct the HTTP Request object. See: https://github.com/smartcontractkit/functions-hardhat-starter-kit#javascript-code\n// params used for URL query parameters\nconst uniswapRequest = Functions.makeHttpRequest({\n  url: url,\n  method: \"POST\",\n  headers: {\n    accept: 'application/json',\n    'content-type': 'application/json',\n    authorization: `Bearer ${access_token}`\n  },\n  data: {\n    sqlText: sqlText,\n    resourceId: resourceId\n  }\n\n})\n\n// Execute the API request (Promise)\nconst uniswapResponse = await uniswapRequest.data;\n\nif (uniswapResponse.error) {\n  console.error(uniswapResponse.error)\n  throw Error(\"Request to Uniswap failed\")\n}\n\nconst selectedAddresses = uniswapResponse.map((address) => {\n    address.WALLET_ADDRESS\n});\n\nconsole.log(uniswapResponse);\n//console.log(selectedAddresses);\n\n\nreturn Functions.encodeBytes(selectedAddresses);\n",
  "secrets": {},
  "perNodeSecrets": [],
  "secretsURLs": [],
  "activeManagedSecretsURLs": true,
  "args": [],
  "expectedReturnType": "Buffer",
  "DONPublicKey": "a30264e813edc9927f73e036b7885ee25445b836979cb00ef112bc644bd16de2db866fa74648438b34f52bb196ffa386992e94e0a3dc6913cee52e2e98f1619c"
}
